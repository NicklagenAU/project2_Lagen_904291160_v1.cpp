#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cassert>

using namespace std;

// Constants
const int TOTAL_RUNS = 10000;
const double AARON_ACCURACY = 1.0 / 3.0;
const double BOB_ACCURACY = 0.5;
const double CHARLIE_ACCURACY = 1.0;

// Function Prototypes
bool at_least_two_alive(bool A_alive, bool B_alive, bool C_alive);
void Aaron_shoots1(bool& B_alive, bool& C_alive);
void Bob_shoots(bool& A_alive, bool& C_alive);
void Charlie_shoots(bool& A_alive, bool& B_alive);
void Aaron_shoots2(bool& B_alive, bool& C_alive);
void simulate_truel(bool useStrategy2);
void pause();

// Main Function
int main() {
    srand(time(0)); // Seed random number generator

    cout << "*** Welcome to Nicholas's Truel of the Fates Simulator ***\n\n";

    cout << "Ready to test strategy 1 (run 10,000 times):\n";
    pause();
    simulate_truel(false);

    cout << "\nReady to test strategy 2 (run 10,000 times):\n";
    pause();
    simulate_truel(true);

    return 0;
}

// Function Implementations

bool at_least_two_alive(bool A_alive, bool B_alive, bool C_alive) {
    return (A_alive + B_alive + C_alive) >= 2;
}

void Aaron_shoots1(bool& B_alive, bool& C_alive) {
    if (rand() % 100 < (AARON_ACCURACY * 100)) {
        if (C_alive) {
            C_alive = false;
        } else {
            B_alive = false;
        }
    }
}

void Bob_shoots(bool& A_alive, bool& C_alive) {
    if (rand() % 100 < (BOB_ACCURACY * 100)) {
        if (C_alive) {
            C_alive = false;
        } else {
            A_alive = false;
        }
    }
}

void Charlie_shoots(bool& A_alive, bool& B_alive) {
    if (B_alive) {
        B_alive = false;
    } else {
        A_alive = false;
    }
}

void Aaron_shoots2(bool& B_alive, bool& C_alive) {
    static bool first_shot = true;
    if (first_shot) {
        first_shot = false; // Intentionally miss
        return;
    }
    Aaron_shoots1(B_alive, C_alive);
}

void simulate_truel(bool useStrategy2) {
    int aaron_wins = 0, bob_wins = 0, charlie_wins = 0;

    for (int i = 0; i < TOTAL_RUNS; i++) {
        bool aaron_alive = true, bob_alive = true, charlie_alive = true;

        while (at_least_two_alive(aaron_alive, bob_alive, charlie_alive)) {
            if (aaron_alive) {
                if (useStrategy2) {
                    Aaron_shoots2(bob_alive, charlie_alive);
                } else {
                    Aaron_shoots1(bob_alive, charlie_alive);
                }
            }
            if (bob_alive) {
                Bob_shoots(aaron_alive, charlie_alive);
            }
            if (charlie_alive) {
                Charlie_shoots(aaron_alive, bob_alive);
            }
        }

        if (aaron_alive) aaron_wins++;
        else if (bob_alive) bob_wins++;
        else charlie_wins++;
    }

    cout << "Aaron won " << aaron_wins << "/" << TOTAL_RUNS << " truels or " 
         << (static_cast<double>(aaron_wins) / TOTAL_RUNS) * 100 << "%\n";
    cout << "Bob won " << bob_wins << "/" << TOTAL_RUNS << " truels or " 
         << (static_cast<double>(bob_wins) / TOTAL_RUNS) * 100 << "%\n";
    cout << "Charlie won " << charlie_wins << "/" << TOTAL_RUNS << " truels or " 
         << (static_cast<double>(charlie_wins) / TOTAL_RUNS) * 100 << "%\n";
}

// Pause function
void pause() {
    cout << "Press Enter to continue...";
    cin.ignore().get();
}
