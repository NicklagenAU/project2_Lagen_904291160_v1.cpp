#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cassert>

using namespace std;

// Constants
const int TOTAL_RUNS = 10000;
const double AARON_ACCURACY = 1.0 / 3.0;
const double BOB_ACCURACY = 0.5;
const double CHARLIE_ACCURACY = 1.0;

// Function Prototypes
bool at_least_two_alive(bool A_alive, bool B_alive, bool C_alive);
void Aaron_shoots1(bool& B_alive, bool& C_alive);
void Bob_shoots(bool& A_alive, bool& C_alive);
void Charlie_shoots(bool& A_alive, bool& B_alive);
void Aaron_shoots2(bool& B_alive, bool& C_alive);

// Test Function Prototypes
void test_at_least_two_alive();
void test_Aaron_shoots1();
void test_Bob_shoots();
void test_Charlie_shoots();
void test_Aaron_shoots2();

int main() {
    srand(time(0)); // Seed RNG

    // Run test cases
    test_at_least_two_alive();
    test_Aaron_shoots1();
    test_Bob_shoots();
    test_Charlie_shoots();
    test_Aaron_shoots2();

    cout << "\nAll unit tests passed!\n";
    return 0;
}

// Function Implementations

bool at_least_two_alive(bool A_alive, bool B_alive, bool C_alive) {
    return (A_alive + B_alive + C_alive) >= 2;
}

void Aaron_shoots1(bool& B_alive, bool& C_alive) {
    if (rand() % 100 < (AARON_ACCURACY * 100)) {
        if (C_alive) {
            C_alive = false;
        } else {
            B_alive = false;
        }
    }
}

void Bob_shoots(bool& A_alive, bool& C_alive) {
    if (rand() % 100 < (BOB_ACCURACY * 100)) {
        if (C_alive) {
            C_alive = false;
        } else {
            A_alive = false;
        }
    }
}

void Charlie_shoots(bool& A_alive, bool& B_alive) {
    if (B_alive) {
        B_alive = false;
    } else {
        A_alive = false;
    }
}

void Aaron_shoots2(bool& B_alive, bool& C_alive) {
    static bool first_shot = true;
    if (first_shot) {
        first_shot = false; // Intentionally miss
        return;
    }
    Aaron_shoots1(B_alive, C_alive);
}

// Test Function Implementations

void test_at_least_two_alive() {
    cout << "Unit Testing 1: Function - at_least_two_alive()\n";

    cout << "Case 1: Aaron alive, Bob alive, Charlie alive\n";
    assert(true == at_least_two_alive(true, true, true));
    cout << "Case passed ...\n";

    cout << "Case 2: Aaron dead, Bob alive, Charlie alive\n";
    assert(true == at_least_two_alive(false, true, true));
    cout << "Case passed ...\n";

    cout << "Case 3: Aaron alive, Bob dead, Charlie alive\n";
    assert(true == at_least_two_alive(true, false, true));
    cout << "Case passed ...\n";

    cout << "Case 4: Aaron alive, Bob alive, Charlie dead\n";
    assert(at_least_two_alive(true, true, false) == true);
    cout << "Case passed ...\n";

    cout << "Case 5: Aaron alive, Bob dead, Charlie dead\n";
    assert(at_least_two_alive(true, false, false) == false);
    cout << "Case passed... \n";

    cout << "Case 5: Aaron dead, Bob dead, Charlie alive\n";
    assert(at_least_two_alive(false, false, true) == false);
    cout << "Case passed... \n";

    cout << "Case 6: Aaron dead, Bob alive, Charlie dead\n";
    assert(at_least_two_alive(false, true, false) == false);
    cout << "Case passed... \n";

    cout << "All cases passed...\n";
}

void test_Aaron_shoots1() {
    cout << "Unit Testing 2: Function - Aaron_shoots1()\n";
    bool bob = true, charlie = true;
    Aaron_shoots1(bob, charlie);
    cout << "Aaron shoots...\n";
}

void test_Bob_shoots() {
    cout << "Unit Testing 3: Function - Bob_shoots()\n";
    bool aaron = true, charlie = true;
    Bob_shoots(aaron, charlie);
    cout << "Bob shoots...\n";
}

void test_Charlie_shoots() {
    cout << "Unit Testing 4: Function - Charlie_shoots()\n";
    bool aaron = true, bob = true;
    Charlie_shoots(aaron, bob);
    cout << "Charlie shoots...\n";
}

void test_Aaron_shoots2() {
    cout << "Unit Testing 5: Function - Aaron_shoots2()\n";
    bool bob = true, charlie = true;
    Aaron_shoots2(bob, charlie);
    cout << "Aaron's second strategy executed...\n";
}
